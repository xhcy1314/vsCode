{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "JavaScript 和 TypeScript 的语言功能",
			"description": "为 JavaScript 和 TypeScript 提供丰富的语言支持。",
			"reloadProjects.title": "重载项目",
			"configuration.typescript": "TypeScript",
			"typescript.useCodeSnippetsOnMethodSuggest.dec": "完成函数的参数签名。",
			"typescript.tsdk.desc": "指定包含要使用的 tsserver 和 lib*.d.ts 文件的文件夹路径。",
			"typescript.disableAutomaticTypeAcquisition": "禁用自动获取类型。",
			"typescript.tsserver.log": "将 TS 服务器的日志保存到一个文件。此日志可用于诊断 TS 服务器问题。日志可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。",
			"typescript.tsserver.pluginPaths": "其他用于搜索 TypeScript 语言服务插件的路径。要求工作区使用高于 2.3.0 版本的 TypeScript。",
			"typescript.tsserver.pluginPaths.item": "相对或绝对路径。相对路径将根据工作区文件夹进行解析。",
			"typescript.tsserver.trace": "对发送到 TS 服务器的消息启用跟踪。此跟踪信息可用于诊断 TS 服务器问题。 跟踪信息可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。",
			"typescript.validate.enable": "启用/禁用 TypeScript 验证。",
			"typescript.format.enable": "启用/禁用默认 TypeScript 格式化程序。",
			"javascript.format.enable": "启用/禁用 JavaScript 格式化程序。",
			"format.insertSpaceAfterCommaDelimiter": "定义逗号分隔符后面的空格处理。",
			"format.insertSpaceAfterConstructor": "定义 constructor 关键字后的空格处理方式。要求工作区使用高于 2.3.0 版本的 TypeScript。",
			"format.insertSpaceAfterSemicolonInForStatements": "在 For 语句中，定义分号后面的空格处理。",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "定义二进制运算符后面的空格处理",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "定义控制流语句中关键字后面的空格处理。",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "定义匿名函数的函数关键字后面的空格处理。",
			"format.insertSpaceBeforeFunctionParenthesis": "定义函数参数括号前的空格处理方式。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "定义非空小括号的左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "定义非空中括号的左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "定义非空大括号中左括号后和右括号前的空格处理方式。要求工作区使用高于 2.3.0 版本的 TypeScript。",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "定义模板字符串括号中左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterTypeAssertion": "定义 TypeScript 中类型断言后的空格处理方式。要求工作区使用高于 2.4 版本的 TypeScript。",
			"format.placeOpenBraceOnNewLineForFunctions": "定义函数的左大括号是否放置在新的一行。",
			"format.placeOpenBraceOnNewLineForControlBlocks": "定义控制块的左括号是否放置在新的一行。",
			"javascript.validate.enable": "启用/禁用 JavaScript 验证。",
			"goToProjectConfig.title": "转到项目配置",
			"javascript.referencesCodeLens.enabled": "启用/禁用在 JavaScript 文件中引用 CodeLens。",
			"typescript.referencesCodeLens.enabled": "在 TypeScript 文件中启用或禁用引用 CodeLens。",
			"typescript.implementationsCodeLens.enabled": "启用/禁用实现 CodeLens。",
			"typescript.openTsServerLog.title": "打开 TS 服务器日志",
			"typescript.restartTsServer": "重启 TS 服务器",
			"typescript.selectTypeScriptVersion.title": "选择 TypeScript 版本",
			"typescript.reportStyleChecksAsWarnings": "将风格检查问题报告为警告",
			"jsDocCompletion.enabled": "启用/禁用自动 JSDoc 注释",
			"javascript.implicitProjectConfig.checkJs": "启用或禁用 JavaScript 文件的语义检查。若有 jsconfig.json 或 tsconfig.json 文件，将覆盖此设置。要求工作区使用高于 2.3.1 版本的 TypeScript。",
			"typescript.npm": "指定用于自动获取类型的 NPM 可执行文件的路径。要求工作区使用高于 2.3.4 版本的 TypeScript。",
			"typescript.check.npmIsInstalled": "检查是否安装了 NPM 以自动获取类型。",
			"javascript.nameSuggestions": "启用/禁用在 JavaScript 建议列表中包含文件中的唯一名称。",
			"typescript.tsc.autoDetect": "控制 tsc 任务的自动检测。\"off\" 关闭此功能。\"build\" 仅创建单次运行编译任务。\"watch\" 仅创建编译及监视任务。\"on\" 创建构建及监视任务。默认值为 \"on\"。",
			"typescript.problemMatchers.tsc.label": "TypeScript 问题",
			"typescript.problemMatchers.tscWatch.label": "TypeScript 问题(观看模式)",
			"typescript.quickSuggestionsForPaths": "当输入导入路径时启用或禁用快速建议。",
			"typescript.locale": "设置在报告 JavaScript 和 TypeScript 的错误时使用的区域设置。要求工作区使用高于 2.6.0 版本的 TypeScript。默认 (\"null\") 将使用 VS Code 的区域设置。",
			"javascript.implicitProjectConfig.experimentalDecorators": "对不属于任何工程的 JavaScript 文件启用或禁用 \"experimentalDecorators\" 设置。若有 jsconfig.json 或 tsconfig.json 文件，将覆盖此设置。要求工作区使用高于 2.3.1 版本的 TypeScript。",
			"typescript.autoImportSuggestions.enabled": "启用或禁用自动导入建议。要求工作区使用高于 2.6.1 版本的 TypeScript。",
			"taskDefinition.tsconfig.description": "定义 TS 生成的 tsconfig 文件。",
			"javascript.suggestionActions.enabled": "启用或禁用编辑器中 JavaScript 文件的建议诊断。要求工作区使用高于 2.8 版本的 TypeScript。",
			"typescript.suggestionActions.enabled": "启用或禁用编辑器中 TypeScript 文件的建议诊断。要求工作区使用高于 2.8 版本的 TypeScript。",
			"typescript.preferences.quoteStyle": "用于快速修复的首选引用样式: \"single\" (单引号)、\"double\" (双引号) 或 \"auto\" (从已有 import 语句中推测引号类型)。要求工作区使用高于 2.9 版本的 TypeScript。",
			"typescript.preferences.importModuleSpecifier": "自动 import 语句中首选的路径类型:\n- \"relative\"，相对路径。\n- \"non-relative\"，根据 \"jsconfig.json\" 或 \"tsconfig.json\" 中设置的 \"baseUrl\" 的计算出的路径。\n- \"auto\"，推测最短路径类型。\n要求工作区使用高于 2.9 版本的 TypeScript。",
			"typescript.showUnused": "启用或禁用突出显示代码中未使用的变量。要求工作区使用高于 2.9 版本的 TypeScript。",
			"typescript.updateImportsOnFileMove.enabled": "启用或禁用在 VS Code 中重命名或移动文件时自动更新 import 语句的路径。可选值有: \"prompt\" (在每次重命名时提示)、\"always\" (始终自动更新路径) 和 \"never\" (从不重命名路径且不要提示)。要求工作区使用高于 2.9 版本的 TypeScript。"
		},
		"out/utils/versionProvider": {
			"couldNotLoadTsVersion": "无法获取此目录 TypeScript 的版本",
			"noBundledServerFound": "VS Code 的 tsserver 已被其他应用程序(例如运行异常的病毒检测工具)删除。请重新安装 VS Code。"
		},
		"out/utils/versionPicker": {
			"useVSCodeVersionOption": "使用 VS Code 的版本",
			"useWorkspaceVersionOption": "使用工作区版本",
			"learnMore": "了解详细信息",
			"selectTsVersion": "选择用于 JavaScript 和 TypeScript 语言功能的 TypeScript 版本"
		},
		"out/utils/typingsStatus": {
			"installingPackages": "提取数据以实现更好的 TypeScript IntelliSense",
			"typesInstallerInitializationFailed.title": "无法为 JavaScript 语言功能安装 typings 文件。请确认 NPM 已安装，或在你的用户设置中配置 “typescript.npm”。点击[这里]({0})了解更多。",
			"typesInstallerInitializationFailed.doNotCheckAgain": "不再显示"
		},
		"out/utils/projectStatus": {
			"hintExclude": "若要启用项目范围内的 JavaScript/TypeScript 语言功能，请排除包含多个文件的文件夹，例如: {0}",
			"hintExclude.generic": "若要启用项目范围内的 JavaScript/TypeScript 语言功能，请排除包含不需要处理的源文件的大型文件夹。",
			"large.label": "配置排除",
			"hintExclude.tooltip": "若要启用项目范围内的 JavaScript/TypeScript 语言功能，请排除包含不需要处理的源文件的大型文件夹。"
		},
		"out/utils/logger": {
			"channelName": "TypeScript"
		},
		"out/utils/api": {
			"invalidVersion": "无效版本"
		},
		"out/features/updatePathsOnRename": {
			"prompt": "是否自动更新已移动文件 ({0}) 的 import 语句?",
			"reject.title": "否",
			"accept.title": "是",
			"always.title": "是，始终更新 import 语句",
			"never.title": "否，从不更新 import 语句"
		},
		"out/features/task": {
			"buildTscLabel": "构建 - {0}",
			"buildAndWatchTscLabel": "监视 - {0}"
		},
		"out/features/referencesCodeLens": {
			"oneReferenceLabel": "1 个引用",
			"manyReferenceLabel": "{0} 个引用",
			"referenceErrorLabel": "无法确定引用"
		},
		"out/features/quickFix": {
			"fixAllInFileLabel": "{0} (修复文件中所有)"
		},
		"out/features/organizeImports": {
			"oraganizeImportsAction.title": "整理 import 语句"
		},
		"out/features/jsDocCompletions": {
			"typescript.jsDocCompletionItem.documentation": "JSDoc 注释"
		},
		"out/features/implementationsCodeLens": {
			"implementationsErrorLabel": "无法确定实现",
			"oneImplementationLabel": "1 个实现",
			"manyImplementationLabel": "{0} 个实现"
		},
		"out/features/directiveCommentCompletions": {
			"ts-check": "在 JavaScript 文件中启用语义检查。必须在文件顶部。",
			"ts-nocheck": "在 JavaScript 文件中禁用语义检查。必须在文件顶部。",
			"ts-ignore": "取消文件下一行的 @ts-check 错误提示。"
		},
		"out/features/completions": {
			"selectCodeAction": "选择要应用的代码操作",
			"acquiringTypingsLabel": "正在获取 typings...",
			"acquiringTypingsDetail": "获取 IntelliSense 的 typings 定义。",
			"autoImportLabel": "从 {0} 自动导入"
		},
		"out/typescriptServiceClient": {
			"noServerFound": "路径 {0} 未指向有效的 tsserver 安装。请回退到捆绑的 TypeScript 版本。",
			"serverCouldNotBeStarted": "无法启动 TypeScript 语言服务器。错误消息为: {0}",
			"typescript.openTsServerLog.notSupported": "TS 服务器日志记录需要 TS 2.2.2+",
			"typescript.openTsServerLog.loggingNotEnabled": "TS 服务器日志记录已关闭。请设置 \"typescript.tsserver.log\" 并重启\n TS 服务器以启用日志记录",
			"typescript.openTsServerLog.enableAndReloadOption": "启用日志记录并重启 TS 服务器",
			"typescript.openTsServerLog.noLogFile": "TS 服务器尚未启动日志记录。",
			"openTsServerLog.openFileFailedFailed": "无法打开 TS 服务器日志文件",
			"serverDiedAfterStart": "TypeScript 语言服务在其启动后已中止 5 次。将不会重启该服务。",
			"serverDiedReportIssue": "使用英文报告问题",
			"serverDied": "在过去 5 分钟内，TypeScript 语言服务意外中止了 5 次。"
		},
		"out/commands": {
			"typescript.projectConfigNoWorkspace": "请在 VS Code 中打开一个文件夹，以使用 TypeScript 或 JavaScript 项目",
			"typescript.projectConfigUnsupportedFile": "无法确定 TypeScript 或 JavaScript 项目。不受支持的文件类型",
			"typescript.projectConfigCouldNotGetInfo": "无法确定 TypeScript 或 JavaScript 项目",
			"typescript.noTypeScriptProjectConfig": "文件不属于 TypeScript 项目。点击[这里]({0})了解更多。",
			"typescript.noJavaScriptProjectConfig": "文件不属于 JavaScript 项目。点击[这里]({0})了解更多。",
			"typescript.configureTsconfigQuickPick": "配置 tsconfig.json",
			"typescript.configureJsconfigQuickPick": "配置 jsconfig.json"
		}
	}
}